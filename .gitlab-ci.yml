stages:
  - test
  - security
  - build
  - deploy
  - infrastructure

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  POETRY_CACHE_DIR: "$CI_PROJECT_DIR/.cache/poetry"

cache:
  paths:
    - .cache/pip
    - .cache/poetry
    - .venv/

# Test Stage
test:unit:
  stage: test
  image: python:3.11-slim
  before_script:
    - pip install -e ".[test]"
  script:
    - pytest tests/unit --cov=backend --cov=cli --cov-report=xml --cov-report=term
  coverage: '/TOTAL.*\s+(\d+%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
      - htmlcov/
    expire_in: 1 week
  only:
    - merge_requests
    - main
    - develop

test:integration:
  stage: test
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  before_script:
    - docker-compose up -d postgres redis
    - sleep 30
  script:
    - docker-compose run --rm api pytest tests/integration
  after_script:
    - docker-compose down -v
  only:
    - merge_requests
    - main
    - develop

lint:
  stage: test
  image: python:3.11-slim
  before_script:
    - pip install -e ".[dev]"
  script:
    - black --check .
    - isort --check-only .
    - flake8 .
    - mypy backend cli
  only:
    - merge_requests
    - main
    - develop

# Security Stage
security:sast:
  stage: security
  image: python:3.11-slim
  before_script:
    - pip install bandit safety
  script:
    - bandit -r backend cli -f json -o bandit-report.json
    - safety check --json --output safety-report.json
  artifacts:
    reports:
      sast: bandit-report.json
    paths:
      - bandit-report.json
      - safety-report.json
    expire_in: 1 week
  allow_failure: true
  only:
    - merge_requests
    - main

security:container:
  stage: security
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  script:
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .
    - docker run --rm -v /var/run/docker.sock:/var/run/docker.sock 
      -v $PWD:/tmp/.trivyfs aquasec/trivy:latest image 
      --exit-code 0 --no-progress --format json -o /tmp/.trivyfs/trivy-report.json 
      $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
  artifacts:
    paths:
      - trivy-report.json
    expire_in: 1 week
  allow_failure: true
  only:
    - main

# Build Stage
build:docker:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .
    - docker build -t $CI_REGISTRY_IMAGE:latest .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE:latest
  only:
    - main

build:package:
  stage: build
  image: python:3.11-slim
  before_script:
    - pip install build twine
  script:
    - python -m build
    - twine check dist/*
  artifacts:
    paths:
      - dist/
    expire_in: 1 week
  only:
    - tags

# Deploy Stage
deploy:staging:
  stage: deploy
  image: alpine/helm:latest
  environment:
    name: staging
    url: https://staging.ai-infra-deployer.com
  before_script:
    - apk add --no-cache curl
    - curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
    - chmod +x kubectl && mv kubectl /usr/local/bin/
  script:
    - kubectl config use-context staging
    - helm upgrade --install aid-staging ./charts/aid 
      --set image.tag=$CI_COMMIT_SHA 
      --set environment=staging
      --namespace aid-staging
      --create-namespace
  only:
    - main

deploy:production:
  stage: deploy
  image: alpine/helm:latest
  environment:
    name: production
    url: https://ai-infra-deployer.com
  before_script:
    - apk add --no-cache curl
    - curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
    - chmod +x kubectl && mv kubectl /usr/local/bin/
  script:
    - kubectl config use-context production
    - helm upgrade --install aid-production ./charts/aid 
      --set image.tag=$CI_COMMIT_SHA 
      --set environment=production
      --namespace aid-production
      --create-namespace
  when: manual
  only:
    - tags

# Infrastructure Stage
infrastructure:validate:
  stage: infrastructure
  image: hashicorp/terraform:1.6
  before_script:
    - cd infrastructure/opentofu
  script:
    - terraform init -backend=false
    - terraform validate
    - terraform fmt -check
  only:
    - merge_requests
    - main
    changes:
      - infrastructure/**/*

infrastructure:plan:
  stage: infrastructure
  image: hashicorp/terraform:1.6
  before_script:
    - cd infrastructure/opentofu
  script:
    - terraform init
    - terraform plan -out=tfplan
  artifacts:
    paths:
      - infrastructure/opentofu/tfplan
    expire_in: 1 week
  only:
    - main
    changes:
      - infrastructure/**/*

infrastructure:apply:
  stage: infrastructure
  image: hashicorp/terraform:1.6
  before_script:
    - cd infrastructure/opentofu
  script:
    - terraform init
    - terraform apply -auto-approve tfplan
  dependencies:
    - infrastructure:plan
  when: manual
  only:
    - main
    changes:
      - infrastructure/**/*

# Template validation
templates:validate:
  stage: test
  image: python:3.11-slim
  before_script:
    - pip install -e ".[dev]"
  script:
    - python -m backend.iac.validators.template_validator templates/
  only:
    - merge_requests
    - main
    changes:
      - templates/**/*

# Documentation
docs:build:
  stage: build
  image: python:3.11-slim
  before_script:
    - pip install -e ".[docs]"
  script:
    - mkdocs build
  artifacts:
    paths:
      - site/
    expire_in: 1 week
  only:
    - main

docs:deploy:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache rsync openssh-client
  script:
    - rsync -avz --delete site/ $DOCS_DEPLOY_HOST:/var/www/docs/
  dependencies:
    - docs:build
  environment:
    name: documentation
    url: https://docs.ai-infra-deployer.com
  only:
    - main